# 3_üìà_Analyze.py
"""
Panel de An√°lisis Avanzado

Esta aplicaci√≥n Streamlit proporciona herramientas anal√≠ticas interactivas para explorar
datos financieros, incluyendo:
- An√°lisis de impulsores de costos
- Detecci√≥n de anomal√≠as
- Capacidades de agrupamiento

Caracter√≠sticas:
- Visualizaciones interactivas con Plotly
- Controles din√°micos de par√°metros
- Descomposici√≥n de series temporales
- Almacenamiento en cach√© de datos para rendimiento
"""

# Importar librer√≠as requeridas con categor√≠as agrupadas
# Procesamiento central de datos
import pandas as pd
import numpy as np

# Visualizaci√≥n
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt

# An√°lisis estad√≠stico
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Marco de la aplicaci√≥n
import streamlit as st

# Configurar ajustes predeterminados de p√°gina
st.set_page_config(
    page_title="Panel de An√°lisis Avanzado",
    page_icon="üìà",
    layout="wide",
    menu_items={
        'Get help': 'https://github.com/Bokols',
        'About': "Herramienta de an√°lisis estad√≠stico y machine learning avanzado"
    }
)

# Estilos CSS personalizados para elementos de UI consistentes
st.markdown("""
<style>
    /* Estilo para tarjetas de m√©tricas */
    .stMetric {
        border-radius: 8px;
        padding: 15px;
        background-color: #f8f9fa;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Estilo para contenedores de gr√°ficos */
    .stPlotlyChart {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Mejorar espaciado para pesta√±as */
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
</style>
""", unsafe_allow_html=True)

# ==================== CARGA DE DATOS ====================
@st.cache_data(show_spinner="Cargando conjunto de datos anal√≠ticos...")
def load_data():
    """
    Genera y almacena en cach√© datos sint√©ticos para fines de demostraci√≥n.
    
    Returns:
        pd.DataFrame: Contiene datos generados con:
            - Datos temporales (fecha)
            - Caracter√≠sticas categ√≥ricas (tipo_servicio, regi√≥n)
            - M√©tricas de costos num√©ricos
            - M√©tricas financieras derivadas (ingresos, ganancia)
    
    Nota:
        Usa semilla aleatoria de numpy para resultados reproducibles.
        Los datos incluyen relaciones realistas entre variables.
    """
    try:
        np.random.seed(42)  # Para resultados reproducibles
        size = 200  # N√∫mero de registros a generar
        
        # Crear dataframe con caracter√≠sticas principales
        df = pd.DataFrame({
            'date': pd.date_range('2023-01-01', periods=size),
            'service_type': np.random.choice(['Recolecci√≥n', 'Disposici√≥n', 'Reciclaje', 'Peligroso'], size),
            'region': np.random.choice(['Norte', 'Sur', 'Este', 'Oeste'], size),
            'labor_cost': np.random.uniform(200, 1500, size),
            'transport_cost': np.random.uniform(100, 800, size),
            'equipment_cost': np.random.uniform(100, 1200, size),
            'waste_volume': np.random.uniform(1, 20, size),
            'service_hours': np.random.uniform(1, 8, size),
            'hazardous': np.random.choice([True, False], size, p=[0.2, 0.8]),
            'fuel_price': np.random.uniform(2.5, 4.5, size)
        })
        
        # Calcular m√©tricas financieras derivadas
        df['total_cost'] = (df['labor_cost'] + 
                          df['transport_cost'] + 
                          df['equipment_cost'] + 
                          (df['hazardous'] * 500))  # Prima por peligrosidad
        
        df['revenue'] = df['total_cost'] * np.random.uniform(1.4, 1.6, size)
        df['profit'] = df['revenue'] - df['total_cost']
        df['profit_margin'] = (df['profit'] / df['revenue']) * 100
        
        return df
    
    except Exception as e:
        st.error(f"Error al generar datos de muestra: {str(e)}")
        return pd.DataFrame()

# Cargar los datos
df = load_data()

# ==================== CONTROLES DE BARRA LATERAL ====================
with st.sidebar:
    st.header("‚öôÔ∏è Par√°metros de An√°lisis")
    
    with st.expander("Configuraci√≥n Principal", expanded=True):
        # Selecci√≥n de variable objetivo
        target_variable = st.selectbox(
            "Variable Objetivo",
            options=['profit', 'profit_margin', 'total_cost', 'revenue'],
            index=0,
            help="Selecciona la m√©trica financiera que deseas analizar"
        )
        
        # Control de ventana para detecci√≥n de anomal√≠as
        analysis_days = st.slider(
            "Ventana de Detecci√≥n de Anomal√≠as",
            min_value=7,
            max_value=30,
            value=14,
            help="N√∫mero de d√≠as a usar para calcular estad√≠sticas m√≥viles en detecci√≥n de anomal√≠as"
        )
    
    with st.expander("Opciones Avanzadas", expanded=False):
        # Alternar agrupamiento
        clustering_enabled = st.checkbox(
            "Habilitar An√°lisis de Agrupamiento",
            value=False,
            help="Habilita para realizar segmentaci√≥n de clientes basada en caracter√≠sticas seleccionadas"
        )
        
        # Alternar descomposici√≥n de series temporales
        time_decomposition = st.checkbox(
            "Habilitar Descomposici√≥n de Series Temporales",
            value=False,
            help="Descompone datos de series temporales en componentes de tendencia, estacionalidad y residuos"
        )

# ==================== CONTENIDO PRINCIPAL ====================
st.title("üìà An√°lisis Financiero Avanzado")

# Secci√≥n "Acerca de" expandible
with st.expander("‚ÑπÔ∏è Acerca de esta herramienta", expanded=False):
    st.markdown("""
    **Bienvenido al Panel de An√°lisis Avanzado**  
    Esta herramienta interactiva proporciona informaci√≥n profunda sobre datos financieros.
    
    **Caracter√≠sticas Clave:**
    - **An√°lisis de Impulsores**: Identifica impulsores clave de costos y sus relaciones
    - **Detecci√≥n de Anomal√≠as**: Detecta patrones inusuales en m√©tricas financieras
    - **Agrupamiento**: Descubre agrupaciones naturales en tus datos
    
    **C√≥mo usar:**
    1. Selecciona tu m√©trica objetivo en la barra lateral
    2. Ajusta los par√°metros de an√°lisis seg√∫n sea necesario
    3. Navega entre pesta√±as para explorar diferentes an√°lisis
    4. Pasa el cursor sobre visualizaciones para informaci√≥n detallada
    """)

# Crear pesta√±as principales de an√°lisis
tab1, tab2, tab3 = st.tabs(["üìä An√°lisis de Impulsores", "üìâ Detecci√≥n de Anomal√≠as", "üîÑ Agrupamiento"])

# ==================== PESTA√ëA DE AN√ÅLISIS DE IMPULSORES ====================
with tab1:
    st.subheader("Importancia de Impulsores de Costo")
    st.markdown("""
    Analiza c√≥mo diferentes factores operacionales se correlacionan con tu m√©trica financiera seleccionada.
    El gr√°fico de barras muestra coeficientes de correlaci√≥n de Pearson entre cada impulsor y tu variable objetivo.
    """)
    
    # Calcular correlaciones con variable objetivo
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    correlations = df[numeric_cols].corr()[target_variable].drop(target_variable)
    
    # Crear gr√°fico de correlaci√≥n interactivo
    fig = px.bar(
        correlations.sort_values(),
        orientation='h',
        title=f"Correlaci√≥n con {target_variable.replace('_', ' ').title()}",
        labels={'value': 'Coeficiente de Correlaci√≥n', 'index': 'Variable'},
        color=correlations.sort_values(),
        color_continuous_scale='RdYlGn',
        range_color=[-1, 1]
    )
    st.plotly_chart(fig, use_container_width=True)
    
    st.subheader("An√°lisis de Dependencia Parcial")
    st.markdown("""
    Explora c√≥mo los cambios en un impulsor espec√≠fico afectan tu m√©trica objetivo.
    La l√≠nea muestra valores promedio, mientras que los puntos opcionales muestran observaciones individuales.
    """)
    
    # Crear controles para an√°lisis de dependencia parcial
    col1, col2 = st.columns(2)
    
    with col1:
        driver = st.selectbox(
            "Seleccionar Impulsor para Analizar",
            options=['labor_cost', 'transport_cost', 'equipment_cost', 
                    'waste_volume', 'service_hours', 'fuel_price'],
            index=0,
            help="Elige qu√© factor operacional analizar"
        )
    
    with col2:
        show_individual = st.checkbox(
            "Mostrar Observaciones Individuales",
            value=False,
            help="Muestra puntos de datos individuales detr√°s de la l√≠nea de tendencia promedio"
        )
    
    # Crear bins para an√°lisis (basados en cuantiles para distribuci√≥n uniforme)
    bins = pd.qcut(df[driver], q=10, duplicates='drop')
    grouped = df.groupby(bins)[target_variable].mean().reset_index()
    grouped[driver] = grouped[driver].apply(lambda x: x.mid)
    
    # Crear gr√°fico de dependencia parcial
    fig = px.line(
        grouped,
        x=driver,
        y=target_variable,
        title=f"Impacto de {driver.replace('_', ' ').title()} en {target_variable.replace('_', ' ').title()}",
        markers=True
    )
    
    # A√±adir puntos individuales si se solicita
    if show_individual:
        fig.add_trace(go.Scatter(
            x=df[driver],
            y=df[target_variable],
            mode='markers',
            name='Individual',
            marker=dict(opacity=0.3)
        ))
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Descomposici√≥n de series temporales si est√° habilitada
    if time_decomposition:
        st.subheader("Descomposici√≥n de Series Temporales")
        st.markdown("""
        Descompone tus datos de series temporales en:
        - **Tendencia**: Direcci√≥n a largo plazo
        - **Estacionalidad**: Patrones repetitivos
        - **Residuos**: Variaci√≥n no explicada
        """)
        
        try:
            # Preparar datos de series temporales
            ts_df = df.set_index('date').resample('D')[target_variable].mean().ffill()
            
            # Realizar descomposici√≥n
            decomposition = seasonal_decompose(ts_df, model='additive', period=7)
            
            # Crear visualizaci√≥n
            fig = go.Figure()
            
            # A√±adir componente de tendencia
            fig.add_trace(go.Scatter(
                x=decomposition.trend.index,
                y=decomposition.trend,
                name='Tendencia',
                line=dict(color='blue')
            ))
            
            # A√±adir componente estacional
            fig.add_trace(go.Scatter(
                x=decomposition.seasonal.index,
                y=decomposition.seasonal,
                name='Estacionalidad',
                line=dict(color='green')
            ))
            
            # A√±adir componente residual
            fig.add_trace(go.Scatter(
                x=decomposition.resid.index,
                y=decomposition.resid,
                name='Residuos',
                line=dict(color='red')
            ))
            
            # Configurar dise√±o
            fig.update_layout(
                title=f"Descomposici√≥n de Series Temporales de {target_variable.replace('_', ' ').title()}",
                xaxis_title="Fecha",
                yaxis_title="Valor",
                hovermode="x unified",
                legend=dict(orientation="h", yanchor="bottom", y=1.02)
            )
            
            st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"No se pudo realizar la descomposici√≥n de series temporales: {str(e)}")

# ==================== PESTA√ëA DE DETECCI√ìN DE ANOMAL√çAS ====================
with tab2:
    st.subheader("Detecci√≥n de Anomal√≠as")
    st.markdown("""
    Identifica patrones inusuales en tus datos financieros usando estad√≠sticas m√≥viles.
    Las anomal√≠as se detectan cuando los valores exceden desviaciones est√°ndar especificadas del promedio m√≥vil.
    """)
    
    # Calcular estad√≠sticas m√≥viles
    rolling_df = df.set_index('date')[target_variable].rolling(f'{analysis_days}D')
    df['rolling_mean'] = rolling_df.mean().values
    df['rolling_std'] = rolling_df.std().values
    df['z_score'] = (df[target_variable] - df['rolling_mean']) / df['rolling_std']
    
    # Control de umbral para detecci√≥n de anomal√≠as
    threshold = st.slider(
        "Umbral de Anomal√≠a (Z-Score)",
        min_value=1.0,
        max_value=5.0,
        value=2.5,
        step=0.5,
        help="Valores con esta cantidad de desviaciones est√°ndar de la media ser√°n marcados como anomal√≠as"
    )
    
    # Marcar anomal√≠as
    df['anomaly'] = abs(df['z_score']) > threshold
    
    # Crear visualizaci√≥n de anomal√≠as
    fig = go.Figure()
    
    # A√±adir l√≠nea principal de series temporales
    fig.add_trace(go.Scatter(
        x=df['date'],
        y=df[target_variable],
        name=target_variable.replace('_', ' ').title(),
        mode='lines',
        line=dict(color='blue')
    ))
    
    # A√±adir marcadores de anomal√≠as
    fig.add_trace(go.Scatter(
        x=df[df['anomaly']]['date'],
        y=df[df['anomaly']][target_variable],
        name='Anomal√≠a',
        mode='markers',
        marker=dict(color='red', size=8, line=dict(width=1, color='DarkSlateGrey'))
    ))
    
    # Configurar dise√±o
    fig.update_layout(
        title=f"Anomal√≠as en {target_variable.replace('_', ' ').title()}",
        xaxis_title="Fecha",
        yaxis_title=target_variable.replace('_', ' ').title(),
        hovermode="x unified",
        showlegend=True
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabla opcional de detalles de anomal√≠as
    if st.checkbox("Mostrar Detalles de Anomal√≠as", help="Muestra informaci√≥n detallada sobre anomal√≠as detectadas"):
        st.dataframe(
            df[df['anomaly']][['date', 'service_type', 'region', target_variable, 'z_score']]
            .sort_values('z_score', key=abs, ascending=False)
            .head(20)
            .style.format({
                target_variable: '{:,.2f}',
                'z_score': '{:.2f}'
            }),
            use_container_width=True
        )

# ==================== PESTA√ëA DE AGRUPAMIENTO ====================
with tab3:
    if clustering_enabled:
        st.subheader("An√°lisis de Agrupamiento")
        st.markdown("""
        Agrupa registros similares para descubrir patrones en tus datos.
        Selecciona 2-3 caracter√≠sticas para analizar y ajusta el n√∫mero de grupos.
        """)
        
        # Selecci√≥n de caracter√≠sticas para agrupamiento
        clustering_features = st.multiselect(
            "Seleccionar caracter√≠sticas para agrupamiento",
            options=['labor_cost', 'transport_cost', 'equipment_cost', 
                    'waste_volume', 'service_hours', 'fuel_price'],
            default=['labor_cost', 'transport_cost', 'waste_volume'],
            help="Elige 2-3 caracter√≠sticas para usar en el an√°lisis de agrupamiento"
        )
        
        # Control de cantidad de grupos
        n_clusters = st.slider(
            "N√∫mero de grupos",
            min_value=2,
            max_value=10,
            value=3,
            help="Ajusta para encontrar la agrupaci√≥n m√°s significativa de tus datos"
        )
        
        # Solo proceder si se seleccionan suficientes caracter√≠sticas
        if len(clustering_features) >= 2:
            # Preparar datos para agrupamiento
            X_cluster = df[clustering_features]
            
            # Estandarizar caracter√≠sticas (importante para agrupamiento basado en distancia)
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X_cluster)
            
            # Realizar agrupamiento K-means
            kmeans = KMeans(n_clusters=n_clusters, random_state=42)
            clusters = kmeans.fit_predict(X_scaled)
            df['cluster'] = clusters
            
            # Crear visualizaci√≥n apropiada basada en cantidad de caracter√≠sticas
            if len(clustering_features) == 2:
                # Gr√°fico de dispersi√≥n 2D
                fig = px.scatter(
                    df,
                    x=clustering_features[0],
                    y=clustering_features[1],
                    color='cluster',
                    title="Visualizaci√≥n de Grupos en 2D",
                    hover_data=['service_type', 'region'],
                    color_discrete_sequence=px.colors.qualitative.Plotly
                )
            else:
                # Gr√°fico de dispersi√≥n 3D si se seleccionan 3 caracter√≠sticas
                fig = px.scatter_3d(
                    df,
                    x=clustering_features[0],
                    y=clustering_features[1],
                    z=clustering_features[2],
                    color='cluster',
                    title="Visualizaci√≥n de Grupos en 3D",
                    hover_data=['service_type', 'region'],
                    color_discrete_sequence=px.colors.qualitative.Plotly
                )
            
            # Mostrar la visualizaci√≥n
            st.plotly_chart(fig, use_container_width=True)
            
            # Mostrar perfiles de grupos
            st.subheader("Perfiles de Grupos")
            st.markdown("""
            Compara valores promedio para cada caracter√≠stica entre grupos para entender sus caracter√≠sticas.
            """)
            
            cluster_profile = df.groupby('cluster')[clustering_features].mean()
            st.dataframe(
                cluster_profile.style.background_gradient(cmap='RdYlGn', axis=0),
                use_container_width=True
            )
    else:
        st.info("‚ÑπÔ∏è Habilita el an√°lisis de agrupamiento en la barra lateral para usar esta funci√≥n")

# ==================== PIE DE P√ÅGINA ====================
st.markdown("---")
st.markdown("""
**Portafolio de Ciencia de Datos** - Desarrollado por [Bo Kolstrup]  
[GitHub](https://github.com/Bokols) | [LinkedIn](https://www.linkedin.com/in/bo-kolstrup/)
""")